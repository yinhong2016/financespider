<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 支持各种注解，使得注解可以正常工作 -->
	<context:annotation-config />

	<!-- 开启注解后，将自动扫描、自动注入 -->
	<context:component-scan base-package="com.sevencolor" />

	<!--配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="jdbc:mysql://7colorworld.com:3306/financespider" />
		<property name="username" value="root" />
		<property name="password" value="Terry2008" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="5" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="100" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="10" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="33" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开 removeAbandoned 功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800 秒，也就是 30 分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭 abanded 连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
	</bean>

	<!-- 配置SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>

	<!-- 查找类路径下的映射器并自动创建成MapperFactoryBean,它将创建的代理类实现口,并且注入Spring -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sevencolor.domain" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 配置注解事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- 获取雪球组合定时运行的任务 -->
	<bean id="xqQuartzJob" class="com.sevencolor.task.XQQuartzJob"></bean>

	<!-- 定时获取Access_Token -->
	<bean id="jobtaskForToken"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="xqQuartzJob" />
		</property>
		<!-- 定时获取雪球组合信息 -->
		<property name="targetMethod">
			<value>getCubeInfo</value>
		</property>
	</bean>

	<!-- 定义定时任务触发时间 -->
	<bean id="doTimeForToken" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobtaskForToken"></property>
		<property name="cronExpression" value="0 0/30 8-22 ? * MON-FRI"></property>
	</bean>

	<!-- 定义定时任务触发时间(1个小时触发一次) <bean id="doTimeForToken" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"> 
		<property name="jobDetail"> <ref bean="jobtaskForToken" /> </property> <property 
		name="repeatInterval"> <value>3600000</value> </property> <property name="startDelay"> 
		<value>2000</value> </property> </bean> -->

	<!-- 任务总管理类 -->
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="doTimeForToken" />
			</list>
		</property>
	</bean>

</beans>